import json
from random import choice, randint

test_names_01 = [
    "Chanel Classic Card Holder Grained Calfskin & Silver Black",
    "Chanel Classic Flap Card Holder With Chain Grained Calfskin & Gold Black",
    "Chanel Small Gabrielle Backpack Aged Calfskin & Gold Silver Black",
    "Chanel Classic Card Holder Grained Calfskin & Gold Black",
    "Chanel Medium 19 Hand Bag Lambskin & Gold Black",
    "Chanel Classic Card Holder Grained Calfskin & Silver Black",
    "Chanel Clutch With Chain Grained Calfskin & Gold Black",
    "Chanel Vanity With Chain Lambskin & Gold Black",
    "Chanel Small Vanity With Chain Lambskin & Gold Black",
    "Chanel Classic Zipped Coin Purse Grained Calfskin & Gold Black",
    "Chanel Classic Card Holder Grained Calfskin & Gold Black",
    "Chanel Small Classic Flap Wallet Grained Calfskin & Silver Black",
    "Chanel Classic Zipped Coin Purse Grained Calfskin & Silver Black",
    "Chanel Medium Classic Handbag Grained Calfskin & Silver Black",
    "Chanel Small Classic Flap Wallet Grained Calfskin & Gold Black",
    "Chanel Classic Wallet On Chain Grained Calfskin & Gold Black",
    "Chanel Mini Flap Bag with Top Handle Lambskin & Gold Beige",
    "Chanel Classic Wallet On Chain Grained Calfskin & Silver Black",
    "Chanel Large 2.55 Handbag Aged Calfskin & Gold Black",
    "Chanel Boy Chanel Flap Card Holder Grained Calfskin & Ruthenium Black",
    "Chanel Clutch With Chain Lambskin & Gold Black",
    "Chanel Mini Flap Bag Lambskin & Gold Black",
    "Chanel Small Classic Pouch Grained Calfskin & Gold Black",
    "Chanel Medium Classic Pouch Grained Calfskin & Silver Black",
    "Chanel Boy Chanel Flap Coin Purse With Chain Grained Calfskin & Gold Black",
    "Chanel Classic Wallet On Chain Grained Calfskin & Gold Black",
    "Chanel Small Gabrielle Hobo Bag Aged Calfskin & Gold Black",
    "Chanel Small Classic Handbag Grained Calfskin & Gold Black",
    "Chanel Small Flap Bag with Top Handle Lambskkin & Gold Black",
    "Chanel Small Vanity With Chain Lambskin & Gold Black",
    "Chanel 19 Flap Card Holder Lambskin & Gold Black",
    "Chanel Medium Flap Bag with Top Handle Grained Calfskin & Gold Black",
    "Chanel Medium Gabrielle Medium Hobo Bag Aged Calfskin & Gold Black",
    "Chanel Medium Classic Handbag Grained Calfskin & Gold Black",
    "Chanel Small Classic Handbag Grained Calfskin & Gold Beige",
    "Chanel Belt Bag Lambskin & Gold Black",
    "Chanel Camellia Flap Card Holder With Chain Lambskin & Gold Black",
    "Chanel Small Box With Chain Patent Calfskin & Gold Black",
    "Chanel Card Holder Grained Calfskin & Gold Black",
    "Chanel Medium Pouch Aged Calfskin & Gold Black",
    "Chanel Flap Card Holder With Chain Calfskin & Gold Black",
    "Chanel Mini Flap Bag with Top Handle Lambskin & Gold Black",
    "Chanel Mini Flap Bag with Top Handle Grained Calfskin & Gold Black",
    "Chanel Mini Flap Bag Calfskin & Black Gold",
    "Chanel Medium Classic Handbag Grained Calfskin & Gold Beige",
    "Chanel Vanity With Chain Lambskin & Champagne Gold Black",
    "Chanel Small Vanity With Chain Lambskin & Champagne Gold Black",
    "Chanel Medium Classic Pouch Grained Calfskin & Black",
    "Chanel Wallet On Chain Lambskin & Gold Black",
    "Chanel Large 2.55 Handbag Aged Calfskin & Ruthenium Black",
    "Chanel Small 19 Flap Wallet Lambskin & Gold Black",
    "Chanel Classic Card Holder Grained Calfskin & Gold Black",
    "Chanel 19 Card Holder Lambskin & Gold Black",
    "Chanel Small Classic Flap Wallet Grained Calfskin & Gold Black",
    "Chanel Small Classic Flap Wallet Grained Calfskin & Gold Black",
    "Chanel Small 19 Pouch Lambskin & Gold Black",
    "Chanel Medium Classic Pouch Grained Calfskin & Gold Black",
    "Chanel Flap Coin Purse With Chain Lambskin & Gold Black",
    "Chanel Clutch With Chain Calfskin Imitation Pearl & Gold Black",
    "Chanel Wallet On Chain Calfskin & Gold Black",
    "Chanel Clutch With Chain Calfskin & Gold Black",
    "Chanel Small Flap Bag with Top Handle Grained Calfskin & Gold Black",
    "Chanel Small Boy Chanel Handbag Grained Calfskin & Ruthenium Black",
    "Chanel Classic Card Holder Lambskin & Silver Black",
    "Adidas x Chanel x Pharrell Williams Hu NMD",
]

test_categories = ["accessory", "bag", "watch", "jewelry"]
test_designers = [
    "Lousi Vuitton",
    "Gucci",
    "Hermes",
    "Chanel",
    "Fendi",
    "Christian Dior",
    "Prada",
    "Saint Laurent",
    "Balenciaga",
    "Bottega Veneta",
    "Celine",
]
test_conditions = [
    "Excellent",
    "Great",
    "Very Good",
    "Good",
    "Fair",
    "Outlet",
]
test_styles = [
    "Bucket",
    "Clutches",
    "Small Goods",
    "Top Handle",
]
test_colors = [
    "Black",
    "Blue",
    "Brown",
    "Gold",
    "Gray",
    "Green",
    "Metallic",
    "Multicolor",
    "Neutral",
    "Orange",
]
test_stores = [
    "LA - Beverly Hills",
    "LA - Santa Anita",
    "CT - Greenwich",
    "Miami - Dadeland",
    "NYC - Columbus Circle",
    "NYC - Madison Avenue",
    "NYC - Soho",
    "NYC - World Trade Center",
]
test_materials = [
    "Acrylic",
    "Alligator",
    "Beaded",
    "Calf Hair",
    "Canvas Coated",
    "Canvas Plain",
    "Crocodile",
    "Denim",
    "Exotic",
]
test_collections = [
    "Nikki Ogunnaike's Edit",
    "The Winter Edit",
    "Sale",
    "Vintage",
    "Men's Styles",
]

names = [
    "이민준",
    "이서준",
    "정도윤",
    "정예준",
    "정시우",
    "정주원",
    "이하준",
    "최지호",
    "정지후",
    "김준서",
    "김준우",
    "정현우",
    "최도현",
    "김건우",
    "김지훈",
    "이우진",
    "이선우",
    "최서진",
    "이민재",
    "김연우",
    "정현준",
    "이유준",
    "김정우",
    "최은우",
    "정시윤",
    "정승우",
    "정승현",
    "이준혁",
    "김지환",
    "김유찬",
    "이지우",
    "최승민",
    "정윤우",
    "이민성",
    "정시후",
    "최진우",
    "최준영",
    "최지원",
    "정수현",
    "김이준",
    "최수호",
    "김재윤",
    "정시현",
    "김태윤",
    "정동현",
    "정한결",
    "김민규",
    "최재원",
    "정민우",
    "정은찬",
    "이윤호",
    "최재민",
    "최시원",
    "김민찬",
    "이이안",
    "이지안",
    "최시온",
    "정성민",
    "정준호",
    "이승준",
    "이지한",
    "정성현",
    "김하율",
    "이현서",
    "이재현",
    "정서우",
    "최우빈",
    "김태민",
    "정민호",
    "김지율",
    "이은호",
    "이태현",
    "최예성",
    "최지성",
    "김민혁",
    "김준",
    "정성준",
    "김지민",
    "정율",
    "김규민",
    "정정민",
    "김윤재",
    "정하진",
    "최윤성",
    "정하람",
    "김준수",
    "정태양",
    "정은성",
    "정민석",
    "이예찬",
    "정준희",
    "정하민",
    "정도훈",
    "이우주",
    "최건",
    "이지완",
    "김승원",
    "이준성",
    "이현수",
    "이강민",
    "이태준",
    "정정현",
    "이주호",
    "최주안",
    "최승호",
    "김성빈",
    "이다온",
    "정도영",
    "김민서",
    "이우현",
    "정하랑",
    "최건희",
    "이주환",
    "최민수",
    "최지오",
    "이시율",
    "정시훈",
    "정정훈",
    "김원준",
    "최시완",
    "김서율",
    "정민기",
    "정현민",
    "이경민",
    "김도율",
    "이로운",
    "이승윤",
    "최동하",
    "이현성",
    "정주영",
    "정이현",
    "김태훈",
    "정민건",
    "김이든",
    "이동건",
    "이재훈",
    "최태영",
    "정라온",
    "최가온",
    "최시환",
    "최승빈",
    "이호준",
    "최재준",
    "최도경",
    "최세현",
    "김도원",
    "정태경",
    "김서후",
    "김정후",
    "정재하",
    "김윤",
    "최정원",
    "정온유",
    "정도하",
    "정재영",
    "김현진",
    "최찬영",
    "김범준",
    "김영준",
    "정현",
    "김현승",
    "최상현",
    "김승훈",
    "최성윤",
    "이연준",
    "이주혁",
    "최하윤",
    "정찬우",
    "이동윤",
    "정우성",
    "김승재",
    "최단우",
    "김태율",
    "김성훈",
    "정찬희",
    "최세준",
    "최건호",
    "정유건",
    "이태호",
    "정동욱",
    "최수민",
    "김시안",
    "정윤찬",
    "김지혁",
    "정승찬",
    "김산",
    "정윤후",
    "이태우",
    "김현호",
    "이찬",
    "이현빈",
    "이재우",
    "이규빈",
    "정지운",
    "김연호",
    "김준석",
    "김하늘",
    "김효준",
    "최주현",
    "김형준",
    "김서연",
    "이서윤",
    "이지우",
    "김서현",
    "정민서",
    "정하은",
    "김하윤",
    "최윤서",
    "정지유",
    "이지민",
    "이채원",
    "정수아",
    "이지윤",
    "김은서",
    "김다은",
    "김지아",
    "정예은",
    "최수빈",
    "김소율",
    "김예린",
    "이예원",
    "정지안",
    "최지원",
    "최소윤",
    "김하린",
    "정시은",
    "최유진",
    "김채은",
    "정서아",
    "정유나",
    "김윤아",
    "정가은",
    "김서영",
    "김민지",
    "정예진",
    "이수민",
    "이예나",
    "이연우",
    "이수연",
    "정예서",
    "최주아",
    "정하율",
    "최시연",
    "정다인",
    "이시아",
    "정연서",
    "최아린",
    "김아인",
    "정다연",
    "이유주",
    "정서우",
    "김현서",
    "김서은",
    "정하연",
    "정채윤",
    "이서율",
    "최나윤",
    "김지율",
    "정서진",
    "이유빈",
    "최수현",
    "이예지",
    "김다현",
    "김아윤",
    "이나은",
    "이서하",
    "최소은",
    "이나연",
    "이지은",
    "최사랑",
    "이민주",
    "김시현",
    "정예빈",
    "정윤지",
    "김지현",
    "이소연",
    "이채아",
    "김주하",
    "최은채",
    "정지수",
    "최혜원",
    "최승아",
    "최다윤",
    "이소민",
    "정세아",
    "정하영",
    "정서희",
    "이민아",
    "김나현",
    "이채린",
    "이세은",
    "최도연",
    "최규리",
    "정아영",
    "이다온",
    "최가윤",
    "이지연",
    "최예림",
    "이민채",
    "이태희",
    "최시윤",
    "김주은",
    "최유정",
    "정연아",
    "정아현",
    "최보민",
    "이소현",
    "최민정",
    "김수진",
    "김정원",
    "김현지",
    "이민경",
    "김나경",
    "김가현",
    "김윤하",
    "정세연",
    "최지효",
    "김은지",
    "이가연",
    "최라희",
    "정가온",
    "김예슬",
    "이유하",
    "김한별",
    "최채연",
    "김하늘",
    "김현아",
    "이소이",
    "최소희",
    "최봄",
    "이유림",
    "최효주",
    "김채민",
    "최은솔",
    "정가영",
    "이하진",
    "이예주",
    "최유리",
    "최주연",
    "이재이",
    "김윤슬",
    "정설아",
    "이하랑",
    "최다희",
    "이혜린",
    "최리아",
    "최하나",
    "이태연",
    "이은우",
    "이다솜",
    "김하람",
    "최다혜",
    "김유민",
    "김혜인",
    "정다빈",
    "정재인",
    "최지혜",
    "김수인",
    "정승연",
    "김태린",
    "최시온",
    "정은유",
    "김지영",
    "최수정",
    "이채영",
    "이태은",
    "김주원",
    "정고은",
    "이지후",
    "김아라",
    "최단아",
    "최민하",
    "김수지",
    "최소영",
    "최나영",
    "정은별",
    "김서인",
    "이가빈",
    "정보경",
    "이다영",
    "김지온",
    "최채이",
    "김주희",
    "김라온",
    "이채현",
    "최예솔",
    "김정민",
    "이시우",
    "정효린",
    "김정윤",
    "이아진",
    "최세빈",
    "최은재",
    "정서빈",
    "김소정",
    "이한나",
    "최슬아",
    "최나율",
    "이예담",
    "최해인",
]

length = len(test_names_01)

categories = [dict(name=name, id=str(i + 1)) for i, name in enumerate(test_categories)]
designers = [dict(name=name, id=str(i + 1)) for i, name in enumerate(test_designers)]
conditions = [dict(name=name, id=str(i + 1)) for i, name in enumerate(test_conditions)]
styles = [dict(name=name, id=str(i + 1)) for i, name in enumerate(test_styles)]
colors = [dict(name=name, id=str(i + 1)) for i, name in enumerate(test_colors)]
stores = [dict(name=name, id=str(i + 1)) for i, name in enumerate(test_stores)]
materials = [dict(name=name, id=str(i + 1)) for i, name in enumerate(test_materials)]
collections = [
    dict(name=name, id=str(i + 1)) for i, name in enumerate(test_collections)
]
users = [
    dict(
        gender=choice((1, 2)),
        name=name,
        id=str(i + 1),
        email=f"user{i+1}@test.com",
        password=f"password{i+1}",
    )
    for i, name in enumerate(names)
]
posts = [
    dict(
        id=str(i + 1),
        author=f"Author {i}",
        image=f"https://picsum.photos/seed/{randint(1, 1_000)}/400/400?grayscale",
        name=f"High Fashion Event {i}",
        createdAt=f"2021/12/{i+1}",
    )
    for i in range(30)
]
products = []

for _ in range(10):
    base_index = len(products)
    for i in range(length):
        retail_price = randint(700_000, 10_000_000)
        sales_price = int(retail_price * randint(10, 90) / 100)
        products.append(
            dict(
                id=str(base_index + i + 1),
                retailPrice=retail_price,
                salesPrice=sales_price,
                name=test_names_01[i],
                profileImage=f"https://picsum.photos/seed/{randint(1, 1_000)}/400/400?grayscale",
                detailImages=[
                    f"https://picsum.photos/seed/{randint(1, 1_000)}/400/400?grayscale"
                    for _ in range(5, 30)
                ],
                categoryId=choice(categories)["id"],
                designerId=choice(designers)["id"],
                conditionId=choice(conditions)["id"],
                styleId=choice(styles)["id"],
                colorId=choice(colors)["id"],
                storeId=choice(stores)["id"],
                materialId=choice(materials)["id"],
                collectionId=choice(collections)["id"],
            )
        )

data = dict(
    users=users,
    posts=posts,
    categories=categories,
    designers=designers,
    conditions=conditions,
    styles=styles,
    colors=colors,
    stores=stores,
    materials=materials,
    collections=collections,
    products=products,
)

with open("db.json", "w") as fp:
    json.dump(data, fp)
